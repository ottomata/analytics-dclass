
Steps to build the debian package libdclass
===========================================

    # first of all you need to pull the debianize submodule
    git submodule update --init
    # Then you need some tags. If you are building a new version
    # make sure you've pulled from upstream and merged. Afterwards
    # make sure to make a new tag and then
    ./git2deblogs.pl --generate
    # Update the debian/symbols using the dpkg-gensymbols -e.libs/*.so -Odebian/symbols command 
    ## optional ( to clean out old packages )
    # rm -f ../libdclass_*;
    make clean; 
    ## optional ( to clean between consecutive package builds)
    # rm -rf configure Makefile debian/libdclass;
    libtoolize; 
    aclocal; 
    autoheader; 
    autoconf; 
    automake --add-missing; 
    dpkg-buildpackage -us -uc;
    ## optional (to show contentl of the package)
    # dpkg -c ../libdclass_0.1_i386.deb
    #Finally, check there are no important errors in the deb package using
    lintian -Ivi /path/to/package.deb

Building for OSX
================

Get JDK6 from http://developer.apple.com or here


Put this in your $HOME/.bashrc

    export JAVA_HOME=`/usr/libexec/java_home`

Get Mac Ports or brew and install them. Find more details about this here http://mxcl.github.com/homebrew/ or here http://www.macports.org/install.php .

Make sure you install automake, autoconf, libtool with brew or Mac ports.

Ok now we start building dClass. What we're trying to achieve is a shared object. On Linux it's called .so, on OSX it's called .dylib


     glibtoolize
     aclocal
     autoheader
     autoconf
     automake --add-missing
     ./configure
     make
     sudo make install

To make sure you've done this right, check to see if you have the .dylib in place:

     ls /usr/local/lib/libdclassjni.0.*

If you get some files matching that, then you're good. If not then contact the Analytics team.

